1. Do not create markdown documentation.
2. When creating code from scratch you should always make sure the code does work before reitering.
3. When working on complex feature you always should ask for direction on data type the user might need.
4. If you think a library header is needed to go futher stop and ask user. You can recommand a library.
5. If not asked do not modify any code in any way.


Height map structure info:
=== Heightmap structure ===

Minecraft uses heightmaps to optimize various operations on both the server and the client. All heightmaps encode the position of the highest "occupied" block in each column of blocks within a chunk column. The differences have to do with which blocks are considered to be "occupied".

Rather than calculating them from the chunk data, the client receives the initial heightmaps it needs from the server. This trades an increase in network usage for a decrease in client-side processing. Once a chunk is loaded, the client updates its heightmaps based on block changes independently from the server.

No heightmaps are strictly required for the client to accept a chunk. If a heightmap is missing from a Chunk Data packet, the client will initialize it with all heights set to their minimum values. However, block changes will still cause the corresponding height values to be updated as normal.

As of 1.21.5, the Heightmap structure is as follows.

{| class="wikitable"
|+ Heightmap Structure
|-
! Field Name !! Field Type !! Notes
|-
| Type || {{Type|VarInt}} {{Type|Enum}} || See the table below.
|-
| Data || {{Type|Prefixed Array}} of {{Type|Long}} || Packed data array. Described below.
|}

The height values of a heightmap are packed into the long array in the same manner described in [[#Data Array format]], and ordered such that the fastest-increasing coordinate is x. (However, there are only 256 entries&mdash;one for each block column.) The Bits Per Entry value used is calculated as <code>ceil(log<sub>2</sub>(world_height + 1))</code>. This is because the number of possible height values is one more than the world height&mdash;ranging from 0 (completely blank column; not even bedrock) to world height (highest position is occupied). Note that this means, for example, that a world with height 256 will use a Bits Per Entry of 9.

The following heightmaps are currently used by the client:

{| class="wikitable"
 ! Name
 ! ID
 ! Considers Occupied
 ! Purposes
 |-
 | WORLD_SURFACE
 | 1
 | All blocks other than air, cave air and void air.
 | To determine if a beacon beam is obstructed.
 |-
 | MOTION_BLOCKING
 | 4
 | "Solid" blocks, except bamboo saplings and cactuses; fluids.
 | To determine where to display rain and snow.
 |-
 | MOTION_BLOCKING_NO_LEAVES
 | 5
 | Same as MOTION_BLOCKING, excluding leaf blocks.
 |
 |}

This list is exhaustive as of 1.21.5. The listed purposes appear to be exhaustive as of 1.20.2.

=== Data structure ===

The data section of the packet contains most of the useful data for the chunk.

{| class="wikitable"
 |-
 ! Field Name
 ! Field Type
 ! Notes
 |-
 | Data
 | {{Type|Array}} of [[#Chunk Section structure|Chunk Section]]
 | This array is NOT length-prefixed. The number of elements in the array is calculated based on the world's height. Sections are sent bottom-to-top. Starting with 1.18, the world height changes based on the dimension. The height of each dimension is assigned by the server in its corresponding [[Java Edition protocol/Registry data#Dimension Type|registry data]] entry. For example, the vanilla overworld is 384 blocks tall, meaning 24 chunk sections will be included in this array.
 |}

==== Chunk Section structure ====

{{Update|section=1|How do biomes work now?  The biome change happened at the same time as the seed change, but it's not clear how/if biomes could be computed given that it's not the actual seed...  ([https://www.reddit.com/r/Mojira/comments/e5at6i/a_discussion_for_the_changes_to_how_biomes_are/ /r/mojira discussion] which notes that it seems to be some kind of interpolation)}}

A Chunk Section is defined in terms of other [[Java Edition protocol/Data types|data types]]. A Chunk Section consists of the following fields:

{| class="wikitable"
 |-
 ! Field Name
 ! Field Type
 ! Notes
 |-
 | Block count
 | {{Type|Short}}
 | Number of non-air blocks present in the chunk section. "Non-air" is defined as any fluid and block other than air, cave air, and void air. The client will keep count of the blocks as they are broken and placed, and, if the block count reaches 0, the whole chunk section is not rendered, even if it still has blocks.
 |-
 | Block states
 | [[#Paletted Container structure|Paletted Container]]
 | Consists of 4096 entries, representing all the blocks in the chunk section.
 |-
 | Biomes
 | [[#Paletted Container structure|Paletted Container]]
 | Consists of 64 entries, representing 4&times;4&times;4 biome regions in the chunk section.
 |}

==== Chunk Section structure ====

{{Update|section=1|How do biomes work now?  The biome change happened at the same time as the seed change, but it's not clear how/if biomes could be computed given that it's not the actual seed...  ([https://www.reddit.com/r/Mojira/comments/e5at6i/a_discussion_for_the_changes_to_how_biomes_are/ /r/mojira discussion] which notes that it seems to be some kind of interpolation)}}

A Chunk Section is defined in terms of other [[Java Edition protocol/Data types|data types]]. A Chunk Section consists of the following fields:

{| class="wikitable"
 |-
 ! Field Name
 ! Field Type
 ! Notes
 |-
 | Block count
 | {{Type|Short}}
 | Number of non-air blocks present in the chunk section. "Non-air" is defined as any fluid and block other than air, cave air, and void air. The client will keep count of the blocks as they are broken and placed, and, if the block count reaches 0, the whole chunk section is not rendered, even if it still has blocks.
 |-
 | Block states
 | [[#Paletted Container structure|Paletted Container]]
 | Consists of 4096 entries, representing all the blocks in the chunk section.
 |-
 | Biomes
 | [[#Paletted Container structure|Paletted Container]]
 | Consists of 64 entries, representing 4&times;4&times;4 biome regions in the chunk section.
 |}

=====================

Chunk Data
Field Name 	Field Type 	Notes
Heightmaps 	Prefixed Array of Heightmap 	See Chunk Format#Heightmap structure
Data 	Prefixed Array of Byte 	See Chunk Format#Data structure
Block Entities 	Packed XZ 	Prefixed Array 	Unsigned Byte 	The packed section coordinates are relative to the chunk they are in. Values 0-15 are valid.

packed_xz = ((blockX & 15) << 4) | (blockZ & 15) // encode
x = packed_xz >> 4, z = packed_xz & 15 // decode

Y 	Short 	The height relative to the world
Type 	VarInt 	The type of block entity
Data 	NBT 	The block entity's data, without the X, Y, and Z values
